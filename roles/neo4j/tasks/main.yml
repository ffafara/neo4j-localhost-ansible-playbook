---
- name: Change Soft Open File Limit
  lineinfile: dest=/etc/security/limits.conf
              regexp="^neo4j\s+soft"
              line="neo4j   soft    nofile  40000"
              insertbefore="^# End of file$"
              state=present

- name: Change Hard Open File Limit
  lineinfile: dest=/etc/security/limits.conf
              regexp="^neo4j\s+hard"
              line="neo4j   hard    nofile  40000"
              insertbefore="^# End of file$"
              state=present

- name: Change Hard Open File Limit
  lineinfile: dest=/etc/pam.d/su
              insertafter="^# session    required   pam_limits.so$"
              line="session    required   pam_limits.so"
              state=present

- name: install curl on CentOS
  yum: name=curl state=present
  when: ansible_os_family == "RedHat"

- name: install curl on Ubuntu
  apt: name=curl state=present
  when: ansible_os_family == "Debian"

- name: Ensure neo4j user exists
  user: name=neo4j state=present system=yes group=adm shell=/bin/bash home=/opt/neo4j createhome=yes

- name: check if neo4j is already installed
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  stat: path={{neo4j_path}}/neo4j-community-{{neo4j_version}}
  register: neo4j_path_stat
  changed_when: False

- name: download neo4j community version
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  when: not neo4j_path_stat.stat.exists
  get_url: >-
    url=http://dist.neo4j.org/neo4j-community-{{ neo4j_version }}-unix.tar.gz
    dest=/tmp/neo4j-community-{{ neo4j_version }}-unix.tar.gz

- name: extract neo4j
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  when: not neo4j_path_stat.stat.exists
  unarchive: >-
    src=/tmp/neo4j-community-{{ neo4j_version }}-unix.tar.gz
    dest={{neo4j_path}}/
    copy=no

- name: delete neo4j archive file
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  when: not neo4j_path_stat.stat.exists
  file: path=/tmp/neo4j-community-{{ neo4j_version }}-unix.tar.gz state=absent

- name: link init script
  sudo: yes
  file: src={{neo4j_path}}/neo4j-community-{{neo4j_version}}/bin/neo4j dest=/etc/init.d/neo4j state=link

- name: set JAVA_HOME
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  lineinfile: dest={{neo4j_path}}/neo4j-community-{{neo4j_version}}/bin/neo4j
    regexp="^JAVA_HOME="
    line="JAVA_HOME={{ lookup('env','JAVA_HOME') }}"
    insertbefore="^FRIENDLY_NAME="
    state=present

- name: Configure Neo4j server properties
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  template: >-
    src=../files/{{item}}
    dest={{neo4j_path}}/neo4j-community-{{neo4j_version}}/conf/{{item}}
    owner=neo4j
    group=adm
    mode=0644
  with_items:
  - neo4j-server.properties
  - neo4j-wrapper.conf

- name: Ensure Neo4j service is and started
  service: name=neo4j state=started

- name: generate base64 string for default password
  shell: echo -n "neo4j:neo4j" | base64
  register: neo4j_default_password
  changed_when: False

- name: change neo4j password
  command: "curl -H \"Authorization: Basic {{neo4j_default_password.stdout}}\" -H \"Accept: application/json; charset=UTF-8\" -H \"Content-Type: application/json\" -X POST -d '{\"password\":\"{{neo4j_auth_password}}\" }' http://localhost:7474/user/neo4j/password"
  register: neo4j_change_password
  changed_when: neo4j_change_password.stdout.find('Invalid username or password') == -1

- name: add Person uniqueness contraint
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  command: 'bin/neo4j-shell -c "CREATE CONSTRAINT ON (person:Person) ASSERT person.name IS UNIQUE;"'

- name: add Company uniqueness contraint
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  command: 'bin/neo4j-shell -c "CREATE CONSTRAINT ON (company:Company) ASSERT company.name IS UNIQUE;"'
